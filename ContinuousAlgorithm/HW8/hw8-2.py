#!/usr/bin/python
#-*- encoding: utf-8 -*-
"""
Copyright (c) 2015 @myuuuuun
Released under the MIT license.
"""
import math
import numpy as np
import pandas as pd
import functools
import matplotlib.pyplot as plt
EPSIRON = 1.0e-8
np.set_printoptions(precision=3)
np.set_printoptions(linewidth=400)
np.set_printoptions(threshold=np.nan)
pd.set_option('display.max_columns', 30)
pd.set_option('display.width', 400)


residual = [[-4.8571429, -8.952381, -3.3333333],
[2.7428571, 2.2380952, 6.9904762],
[-2.444898, -3.4530612, -2.2571429],
[1.3355102, 1.3748299, 2.8868027],
[-1.0997668, -1.4597862, -1.270068],
[0.65483382, 0.72760933, 1.2424606],
[-0.50051062, -0.6416221, -0.65484354],
[0.31542257, 0.36406567, 0.55181013],
[-0.23047317, -0.28906049, -0.32358026],
[0.1502636, 0.17708945, 0.25026068],
[-0.10692094, -0.13229851, -0.15634154],
[0.071128713, 0.084823672, 0.11501942],
[-0.049827426, -0.061148823, -0.074603774],
[0.033545129, 0.040277617, 0.053298436],
[-0.023283648, -0.028433042, -0.03534828],
[0.015786117, 0.019029871, 0.024821041],
[-0.0108977, -0.013268608, -0.016679961],
[0.0074194249, 0.0089648382, 0.011593732],
[-0.0051054624, -0.006205313, -0.0078520446],
[0.0034845039, 0.0042160724, 0.0054250086],
[-0.0023932169, -0.0029057543, -0.0036911447],
[0.0016357637, 0.0019807887, 0.0025411916],
[-0.0011222125, -0.0013617094, -0.0017337277],
[0.00076769266, 0.00093006159, 0.0011910965],
[-0.00052632559, -0.00063841869, -0.00081393451],
[0.00036023645, 0.00043655001, 0.00055849308],
[-0.00024687945, -0.00029939358, -0.00038200882],
[0.00016902409, 0.00020486464, 0.0002619293],
[-0.00011580987, -0.0001404261, -0.00017926015],
[7.9302405e-05, 9.6127424e-05, 0.00012285895],
[-5.4328042e-05, -6.5870903e-05, -8.4110589e-05],
[3.7205777e-05, 4.5102069e-05, 5.7631889e-05],
[-2.5486668e-05, -3.0900344e-05, -3.9463167e-05],
[1.7455259e-05, 2.1160564e-05, 2.7035762e-05],
[-1.1956616e-05, -1.4495965e-05, -1.8514758e-05],
[8.1891239e-06, 9.9276657e-06, 1.2683118e-05],
[-5.6092811e-06, -6.8004759e-06, -8.6863074e-06],
[3.8418973e-06, 4.6575834e-06, 5.9500459e-06],
[-2.6315298e-06, -3.1903359e-06, -4.0751824e-06],
[1.802405e-06, 2.1850951e-06, 2.7913781e-06],
[-1.2345556e-06, -1.4967058e-06, -1.9118587e-06],
[8.455865e-07, 1.0251273e-06, 1.309542e-06],
[-5.7918031e-07, -7.0216336e-07, -8.9693853e-07],
[3.9670083e-07, 4.8093228e-07, 6.1435812e-07],
[-2.7171735e-07, -3.2941314e-07, -4.2079298e-07],
[1.8610919e-07, 2.2562607e-07, 2.8822034e-07],
[-1.2747388e-07, -1.545412e-07, -1.9741204e-07],
[8.731168e-08, 1.0585081e-07, 1.3521602e-07],
[-5.9803309e-08, -7.2501667e-08, -9.2614375e-08],
[4.0961584e-08, 4.9659096e-08, 6.343544e-08],
[-2.8056229e-08, -3.4013548e-08, -4.3449315e-08],
[1.9216801e-08, 2.3297178e-08, 2.9760209e-08],
[-1.3162349e-08, -1.5957173e-08, -2.0383901e-08],
[9.0154071e-09, 1.0929684e-08, 1.3961753e-08],
[-6.1750072e-09, -7.4861752e-09, -9.562946e-09],
[4.2295056e-09, 5.127573e-09, 6.5500423e-09],
[-2.8969538e-09, -3.5120777e-09, -4.486381e-09],
[1.9842386e-09, 2.405562e-09, 3.0729019e-09],
[-1.3590835e-09, -1.6476651e-09, -2.1047484e-09],
[9.3089092e-10, 1.1285515e-09, 1.4416308e-09],
[-6.3760375e-10, -7.7299056e-10, -9.8742348e-10],
[4.3672088e-10, 5.2945204e-10, 6.763301e-10],
[-2.9912783e-10, -3.6264325e-10, -4.6324189e-10],
[2.04885e-10, 2.4839153e-10, 3.1729996e-10],
[-1.4033574e-10, -1.7013058e-10, -2.1733015e-10],
[9.6120445e-11, 1.1653079e-10, 1.488587e-10],
[-6.5837114e-11, -7.9815266e-11, -1.0195578e-10],
[4.5094595e-11, 5.4669158e-11, 6.983214e-11],
[-3.088374e-11, -3.7443826e-11, -4.7830184e-11],
[2.1154634e-11, 2.564704e-11, 3.2763126e-11],
[-1.4487966e-11, -1.7564616e-11, -2.2435387e-11],
[9.9227293e-12, 1.2029489e-11, 1.5365487e-11],
[-6.7963413e-12, -8.2369667e-12, -1.0523138e-11],
[4.6540549e-12, 5.6434857e-12, 7.2084561e-12],
[-3.1867842e-12, -3.8617998e-12, -4.9347193e-12],
[2.1831426e-12, 2.6467717e-12, 3.3821834e-12],
[-1.4939161e-12, -1.811884e-12, -2.3128166e-12],
[1.0231815e-12, 1.2398971e-12, 1.5845103e-12],
[-6.9988459e-13, -8.4732221e-13, -1.080025e-12],
[4.7961635e-13, 5.8086869e-13, 7.4251716e-13]]


if __name__ == '__main__':
  residual = np.array(residual);
  size = residual.shape[0]
  residual_norm = np.zeros(size, dtype=float)
  for i in range(size):
    residual_norm[i] = np.linalg.norm(residual[i])

  plt.title("Jacobi法, 反復毎の残差の推移")
  x = np.arange(size)
  plt.plot(x, residual_norm, color='green', label="√(残差2乗和)の推移")

  plt.xlabel("repeats")
  plt.ylabel("residual(2-norm)")
  plt.yscale('log')
  plt.legend()
  plt.show()





